{
  "version": 3,
  "sources": ["../src/index.ts", "../src/auth/client.ts", "../src/auth/utils.ts", "../src/auth/server.ts", "../src/auth/tokenManager.ts", "../src/handlers/listTools.ts", "../src/handlers/core/BaseToolHandler.ts", "../src/handlers/core/ListCalendarsHandler.ts", "../src/schemas/validators.ts", "../src/handlers/utils.ts", "../src/handlers/core/ListEventsHandler.ts", "../src/handlers/core/SearchEventsHandler.ts", "../src/handlers/core/ListColorsHandler.ts", "../src/handlers/core/CreateEventHandler.ts", "../src/handlers/core/UpdateEventHandler.ts", "../src/handlers/core/DeleteEventHandler.ts", "../src/handlers/callTool.ts"],
  "sourcesContent": ["import { Server } from \"@modelcontextprotocol/sdk/server/index.js\";\nimport { StdioServerTransport } from \"@modelcontextprotocol/sdk/server/stdio.js\";\nimport {\n  ListToolsRequestSchema,\n  CallToolRequestSchema,\n} from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { fileURLToPath } from \"url\";\n\n// Import modular components\nimport { initializeOAuth2Client } from './auth/client.js';\nimport { AuthServer } from './auth/server.js';\nimport { TokenManager } from './auth/tokenManager.js';\nimport { getToolDefinitions } from './handlers/listTools.js';\nimport { handleCallTool } from './handlers/callTool.js';\n\n// --- Global Variables --- \n// Create server instance (global for export)\nconst server = new Server(\n  {\n    name: \"google-calendar\",\n    version: \"1.0.0\",\n  },\n  {\n    capabilities: {\n      tools: {},\n    },\n  }\n);\n\nlet oauth2Client: OAuth2Client;\nlet tokenManager: TokenManager;\nlet authServer: AuthServer;\n\n// --- Main Application Logic --- \nasync function main() {\n  try {\n    // 1. Initialize Authentication\n    oauth2Client = await initializeOAuth2Client();\n    tokenManager = new TokenManager(oauth2Client);\n    authServer = new AuthServer(oauth2Client);\n\n    // 2. Start auth server if authentication is required\n    // The start method internally validates tokens first\n    const authSuccess = await authServer.start();\n    if (!authSuccess) {\n      process.exit(1);\n    }\n\n    // 3. Set up MCP Handlers\n    \n    // List Tools Handler\n    server.setRequestHandler(ListToolsRequestSchema, async () => {\n      // Directly return the definitions from the handler module\n      return getToolDefinitions();\n    });\n\n    // Call Tool Handler\n    server.setRequestHandler(CallToolRequestSchema, async (request) => {\n      // Check if tokens are valid before handling the request\n      if (!(await tokenManager.validateTokens())) {\n        throw new Error(\"Authentication required. Please run 'npm run auth' to authenticate.\");\n      }\n      \n      // Delegate the actual tool execution to the specialized handler\n      return handleCallTool(request, oauth2Client);\n    });\n\n    // 4. Connect Server Transport\n    const transport = new StdioServerTransport();\n    await server.connect(transport);\n\n    // 5. Set up Graceful Shutdown\n    process.on(\"SIGINT\", cleanup);\n    process.on(\"SIGTERM\", cleanup);\n\n  } catch (error: unknown) {\n    process.exit(1);\n  }\n}\n\n// --- Cleanup Logic --- \nasync function cleanup() {\n  try {\n    if (authServer) {\n      // Attempt to stop the auth server if it exists and might be running\n      await authServer.stop();\n    }\n    process.exit(0);\n  } catch (error: unknown) {\n    process.exit(1);\n  }\n}\n\n// --- Exports & Execution Guard --- \n// Export server and main for testing or potential programmatic use\nexport { main, server };\n\n// Run main() only when this script is executed directly\nconst isDirectRun = import.meta.url.startsWith('file://') && process.argv[1] === fileURLToPath(import.meta.url);\nif (isDirectRun) {\n  main().catch(() => {\n    process.exit(1);\n  });\n}\n", "import { OAuth2Client } from 'google-auth-library';\nimport * as fs from 'fs/promises';\nimport { getKeysFilePath } from './utils.js';\n\nexport async function initializeOAuth2Client(): Promise<OAuth2Client> {\n  try {\n    const keysContent = await fs.readFile(getKeysFilePath(), \"utf-8\");\n    const keys = JSON.parse(keysContent);\n\n    const { client_id, client_secret, redirect_uris } = keys.installed;\n\n    // Use the first redirect URI as the default for the base client\n    return new OAuth2Client({\n      clientId: client_id,\n      clientSecret: client_secret,\n      redirectUri: redirect_uris[0], \n    });\n  } catch (error) {\n    throw new Error(`Error loading OAuth keys: ${error instanceof Error ? error.message : error}`);\n  }\n}\n\nexport async function loadCredentials(): Promise<{ client_id: string; client_secret: string }> {\n  try {\n    const keysContent = await fs.readFile(getKeysFilePath(), \"utf-8\");\n    const keys = JSON.parse(keysContent);\n    const { client_id, client_secret } = keys.installed;\n    if (!client_id || !client_secret) {\n        throw new Error('Client ID or Client Secret missing in keys file.');\n    }\n    return { client_id, client_secret };\n  } catch (error) {\n    throw new Error(`Error loading credentials: ${error instanceof Error ? error.message : error}`);\n  }\n} ", "import * as path from 'path';\nimport { fileURLToPath } from 'url';\n\n// Helper to get the project root directory reliably\nfunction getProjectRoot(): string {\n  const __dirname = path.dirname(fileURLToPath(import.meta.url)); \n  // In build output (e.g., build/bundle.js), __dirname is .../build\n  // Go up ONE level to get the project root\n  const projectRoot = path.join(__dirname, \"..\"); // Corrected: Go up ONE level\n  return path.resolve(projectRoot); // Ensure absolute path\n}\n\n// Returns the absolute path for the saved token file.\nexport function getSecureTokenPath(): string {\n  const projectRoot = getProjectRoot();\n  const tokenPath = path.join(projectRoot, \".gcp-saved-tokens.json\");\n  return tokenPath; // Already absolute from getProjectRoot\n}\n\n// Returns the absolute path for the GCP OAuth keys file.\nexport function getKeysFilePath(): string {\n  const projectRoot = getProjectRoot();\n  const keysPath = path.join(projectRoot, \"gcp-oauth.keys.json\"); \n  return keysPath; // Already absolute from getProjectRoot\n} ", "import express from 'express';\nimport { OAuth2Client } from 'google-auth-library';\nimport { TokenManager } from './tokenManager.js';\nimport http from 'http';\nimport open from 'open';\nimport { loadCredentials } from './client.js';\n\nexport class AuthServer {\n  private baseOAuth2Client: OAuth2Client; // Used by TokenManager for validation/refresh\n  private flowOAuth2Client: OAuth2Client | null = null; // Used specifically for the auth code flow\n  private app: express.Express;\n  private server: http.Server | null = null;\n  private tokenManager: TokenManager;\n  private portRange: { start: number; end: number };\n  public authCompletedSuccessfully = false; // Flag for standalone script\n\n  constructor(oauth2Client: OAuth2Client) {\n    this.baseOAuth2Client = oauth2Client;\n    this.tokenManager = new TokenManager(oauth2Client);\n    this.app = express();\n    this.portRange = { start: 3000, end: 3004 };\n    this.setupRoutes();\n  }\n\n  private setupRoutes(): void {\n    this.app.get('/', (req, res) => {\n      // Generate the URL using the active flow client if available, else base\n      const clientForUrl = this.flowOAuth2Client || this.baseOAuth2Client;\n      const scopes = ['https://www.googleapis.com/auth/calendar'];\n      const authUrl = clientForUrl.generateAuthUrl({\n        access_type: 'offline',\n        scope: scopes,\n        prompt: 'consent'\n      });\n      res.send(`<h1>Google Calendar Authentication</h1><a href=\"${authUrl}\">Authenticate with Google</a>`);\n    });\n\n    this.app.get('/oauth2callback', async (req, res) => {\n      const code = req.query.code as string;\n      if (!code) {\n        res.status(400).send('Authorization code missing');\n        return;\n      }\n      // IMPORTANT: Use the flowOAuth2Client to exchange the code\n      if (!this.flowOAuth2Client) {\n        res.status(500).send('Authentication flow not properly initiated.');\n        return;\n      }\n      try {\n        const { tokens } = await this.flowOAuth2Client.getToken(code);\n        // Save tokens using the TokenManager (which uses the base client)\n        await this.tokenManager.saveTokens(tokens);\n        this.authCompletedSuccessfully = true;\n\n        // Get the path where tokens were saved\n        const tokenPath = this.tokenManager.getTokenPath();\n\n        // Send a more informative HTML response including the path\n        res.send(`\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n              <meta charset=\"UTF-8\">\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n              <title>Authentication Successful</title>\n              <style>\n                  body { font-family: sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f4f4f4; margin: 0; }\n                  .container { text-align: center; padding: 2em; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n                  h1 { color: #4CAF50; }\n                  p { color: #333; margin-bottom: 0.5em; }\n                  code { background-color: #eee; padding: 0.2em 0.4em; border-radius: 3px; font-size: 0.9em; }\n              </style>\n          </head>\n          <body>\n              <div class=\"container\">\n                  <h1>Authentication Successful!</h1>\n                  <p>Your authentication tokens have been saved successfully to:</p>\n                  <p><code>${tokenPath}</code></p>\n                  <p>You can now close this browser window.</p>\n              </div>\n          </body>\n          </html>\n        `);\n      } catch (error: unknown) {\n        this.authCompletedSuccessfully = false;\n        const message = error instanceof Error ? error.message : 'Unknown error';\n        // Send an HTML error response\n        res.status(500).send(`\n          <!DOCTYPE html>\n          <html lang=\"en\">\n          <head>\n              <meta charset=\"UTF-8\">\n              <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n              <title>Authentication Failed</title>\n              <style>\n                  body { font-family: sans-serif; display: flex; justify-content: center; align-items: center; height: 100vh; background-color: #f4f4f4; margin: 0; }\n                  .container { text-align: center; padding: 2em; background-color: #fff; border-radius: 8px; box-shadow: 0 2px 4px rgba(0,0,0,0.1); }\n                  h1 { color: #F44336; }\n                  p { color: #333; }\n              </style>\n          </head>\n          <body>\n              <div class=\"container\">\n                  <h1>Authentication Failed</h1>\n                  <p>An error occurred during authentication:</p>\n                  <p><code>${message}</code></p>\n                  <p>Please try again or check the server logs.</p>\n              </div>\n          </body>\n          </html>\n        `);\n      }\n    });\n  }\n\n  async start(openBrowser = true): Promise<boolean> {\n    if (await this.tokenManager.validateTokens()) {\n      this.authCompletedSuccessfully = true;\n      return true;\n    }\n    \n    // Try to start the server and get the port\n    const port = await this.startServerOnAvailablePort();\n    if (port === null) {\n      this.authCompletedSuccessfully = false;\n      return false;\n    }\n\n    // Successfully started server on `port`. Now create the flow-specific OAuth client.\n    try {\n      const { client_id, client_secret } = await loadCredentials();\n      this.flowOAuth2Client = new OAuth2Client(\n        client_id,\n        client_secret,\n        `http://localhost:${port}/oauth2callback`\n      );\n    } catch (error) {\n        // Could not load credentials, cannot proceed with auth flow\n        this.authCompletedSuccessfully = false;\n        await this.stop(); // Stop the server we just started\n        return false;\n    }\n\n    if (openBrowser) {\n      // Generate Auth URL using the newly created flow client\n      const authorizeUrl = this.flowOAuth2Client.generateAuthUrl({\n        access_type: 'offline',\n        scope: ['https://www.googleapis.com/auth/calendar'],\n        prompt: 'consent'\n      });\n      await open(authorizeUrl);\n    }\n\n    return true; // Auth flow initiated\n  }\n\n  private async startServerOnAvailablePort(): Promise<number | null> {\n    for (let port = this.portRange.start; port <= this.portRange.end; port++) {\n      try {\n        await new Promise<void>((resolve, reject) => {\n          // Create a temporary server instance to test the port\n          const testServer = this.app.listen(port, () => {\n            this.server = testServer; // Assign to class property *only* if successful\n            resolve();\n          });\n          testServer.on('error', (err: NodeJS.ErrnoException) => {\n            if (err.code === 'EADDRINUSE') {\n              // Port is in use, close the test server and reject\n              testServer.close(() => reject(err)); \n            } else {\n              // Other error, reject\n              reject(err);\n            }\n          });\n        });\n        return port; // Port successfully bound\n      } catch (error: unknown) {\n        // Check if it's EADDRINUSE, otherwise rethrow or handle\n        if (!(error instanceof Error && 'code' in error && error.code === 'EADDRINUSE')) {\n            // An unexpected error occurred during server start\n            return null;\n        }\n        // EADDRINUSE occurred, loop continues\n      }\n    }\n    return null; // No port found\n  }\n\n  public getRunningPort(): number | null {\n    if (this.server) {\n      const address = this.server.address();\n      if (typeof address === 'object' && address !== null) {\n        return address.port;\n      }\n    }\n    return null;\n  }\n\n  async stop(): Promise<void> {\n    return new Promise((resolve, reject) => {\n      if (this.server) {\n        this.server.close((err) => {\n          if (err) {\n            reject(err);\n          } else {\n            this.server = null;\n            resolve();\n          }\n        });\n      } else {\n        resolve();\n      }\n    });\n  }\n} ", "import { OAuth2Client, Credentials } from 'google-auth-library';\nimport * as fs from 'fs/promises';\nimport * as path from 'path';\nimport { getSecureTokenPath } from './utils.js';\nimport { GaxiosError } from 'gaxios';\n\nexport class TokenManager {\n  private oauth2Client: OAuth2Client;\n  private tokenPath: string;\n\n  constructor(oauth2Client: OAuth2Client) {\n    this.oauth2Client = oauth2Client;\n    this.tokenPath = getSecureTokenPath();\n    this.setupTokenRefresh();\n  }\n\n  // Method to expose the token path\n  public getTokenPath(): string {\n    return this.tokenPath;\n  }\n\n  private async ensureTokenDirectoryExists(): Promise<void> {\n    try {\n        const dir = path.dirname(this.tokenPath);\n        await fs.mkdir(dir, { recursive: true });\n    } catch (error: unknown) {\n        // Ignore errors if directory already exists, re-throw others\n        if (error instanceof Error && 'code' in error && error.code !== 'EEXIST') {\n            console.error('Failed to create token directory:', error);\n            throw error;\n        }\n    }\n  }\n\n  private setupTokenRefresh(): void {\n    this.oauth2Client.on(\"tokens\", async (newTokens) => {\n      try {\n        await this.ensureTokenDirectoryExists();\n        const currentTokens = JSON.parse(await fs.readFile(this.tokenPath, \"utf-8\"));\n        const updatedTokens = {\n          ...currentTokens,\n          ...newTokens,\n          refresh_token: newTokens.refresh_token || currentTokens.refresh_token,\n        };\n        await fs.writeFile(this.tokenPath, JSON.stringify(updatedTokens, null, 2), {\n          mode: 0o600,\n        });\n        console.error(\"Tokens updated and saved\");\n      } catch (error: unknown) {\n        // Handle case where currentTokens might not exist yet\n        if (error instanceof Error && 'code' in error && error.code === 'ENOENT') { \n          try {\n             await fs.writeFile(this.tokenPath, JSON.stringify(newTokens, null, 2), { mode: 0o600 });\n             console.error(\"New tokens saved\");\n          } catch (writeError) {\n            console.error(\"Error saving initial tokens:\", writeError);\n          }\n        } else {\n            console.error(\"Error saving updated tokens:\", error);\n        }\n      }\n    });\n  }\n\n  async loadSavedTokens(): Promise<boolean> {\n    try {\n      await this.ensureTokenDirectoryExists();\n      if (\n        !(await fs\n          .access(this.tokenPath)\n          .then(() => true)\n          .catch(() => false))\n      ) {\n        console.error(\"No token file found at:\", this.tokenPath);\n        return false;\n      }\n\n      const tokens = JSON.parse(await fs.readFile(this.tokenPath, \"utf-8\"));\n\n      if (!tokens || typeof tokens !== \"object\") {\n        console.error(\"Invalid token format in file:\", this.tokenPath);\n        return false;\n      }\n\n      this.oauth2Client.setCredentials(tokens);\n      return true;\n    } catch (error: unknown) {\n      console.error(\"Error loading tokens:\", error);\n      // Attempt to delete potentially corrupted token file\n      if (error instanceof Error && 'code' in error && error.code !== 'ENOENT') { \n          try { \n              await fs.unlink(this.tokenPath); \n              console.error(\"Removed potentially corrupted token file\") \n            } catch (unlinkErr) { /* ignore */ } \n      }\n      return false;\n    }\n  }\n\n  async refreshTokensIfNeeded(): Promise<boolean> {\n    const expiryDate = this.oauth2Client.credentials.expiry_date;\n    const isExpired = expiryDate\n      ? Date.now() >= expiryDate - 5 * 60 * 1000 // 5 minute buffer\n      : !this.oauth2Client.credentials.access_token; // No token means we need one\n\n    if (isExpired && this.oauth2Client.credentials.refresh_token) {\n      console.error(\"Auth token expired or nearing expiry, refreshing...\");\n      try {\n        const response = await this.oauth2Client.refreshAccessToken();\n        const newTokens = response.credentials;\n\n        if (!newTokens.access_token) {\n          throw new Error(\"Received invalid tokens during refresh\");\n        }\n        // The 'tokens' event listener should handle saving\n        this.oauth2Client.setCredentials(newTokens);\n        console.error(\"Token refreshed successfully\");\n        return true;\n      } catch (refreshError) {\n        if (refreshError instanceof GaxiosError && refreshError.response?.data?.error === 'invalid_grant') {\n            console.error(\"Error refreshing auth token: Invalid grant. Token likely expired or revoked. Please re-authenticate.\");\n            // Optionally clear the potentially invalid tokens here\n            // await this.clearTokens(); \n            return false; // Indicate failure due to invalid grant\n        } else {\n            // Handle other refresh errors\n            console.error(\"Error refreshing auth token:\", refreshError);\n            return false;\n        }\n      }\n    } else if (!this.oauth2Client.credentials.access_token && !this.oauth2Client.credentials.refresh_token) {\n        console.error(\"No access or refresh token available. Please re-authenticate.\");\n        return false;\n    } else {\n        // Token is valid or no refresh token available\n        return true;\n    }\n  }\n\n  async validateTokens(): Promise<boolean> {\n    if (!this.oauth2Client.credentials || !this.oauth2Client.credentials.access_token) {\n        // Try loading first if no credentials set\n        if (!(await this.loadSavedTokens())) {\n            return false; // No saved tokens to load\n        }\n        // Check again after loading\n        if (!this.oauth2Client.credentials || !this.oauth2Client.credentials.access_token) {\n            return false; // Still no token after loading\n        }\n    }\n    return this.refreshTokensIfNeeded();\n  }\n\n  async saveTokens(tokens: Credentials): Promise<void> {\n    try {\n        await this.ensureTokenDirectoryExists();\n        await fs.writeFile(this.tokenPath, JSON.stringify(tokens, null, 2), { mode: 0o600 });\n        this.oauth2Client.setCredentials(tokens);\n        console.error(\"Tokens saved successfully to:\", this.tokenPath);\n    } catch (error: unknown) {\n        console.error(\"Error saving tokens:\", error);\n        throw error;\n    }\n  }\n\n  async clearTokens(): Promise<void> {\n    try {\n      this.oauth2Client.setCredentials({}); // Clear in memory\n      await fs.unlink(this.tokenPath);\n      console.error(\"Tokens cleared successfully\");\n    } catch (error: unknown) {\n      if (error instanceof Error && 'code' in error && error.code === 'ENOENT') {\n        // File already gone, which is fine\n        console.error(\"Token file already deleted\");\n      } else {\n        console.error(\"Error clearing tokens:\", error);\n        // Don't re-throw, clearing is best-effort\n      }\n    }\n  }\n} ", "import { ListToolsRequestSchema } from \"@modelcontextprotocol/sdk/types.js\";\n\n// Extracted reminder properties definition for reusability\nconst remindersInputProperty = {\n    type: \"object\",\n    description: \"Reminder settings for the event\",\n    properties: {\n      useDefault: {\n        type: \"boolean\",\n        description: \"Whether to use the default reminders\",\n      },\n      overrides: {\n        type: \"array\",\n        description: \"Custom reminders (uses popup notifications by default unless email is specified)\",\n        items: {\n          type: \"object\",\n          properties: {\n            method: {\n              type: \"string\",\n              enum: [\"email\", \"popup\"],\n              description: \"Reminder method (defaults to popup unless email is specified)\",\n              default: \"popup\"\n            },\n            minutes: {\n              type: \"number\",\n              description: \"Minutes before the event to trigger the reminder\",\n            }\n          },\n          required: [\"minutes\"]\n        }\n      }\n    },\n    required: [\"useDefault\"]\n};\n\nexport function getToolDefinitions() {\n  return {\n    tools: [\n      {\n        name: \"list-calendars\",\n        description: \"List all available calendars\",\n        inputSchema: {\n          type: \"object\",\n          properties: {}, // No arguments needed\n          required: [],\n        },\n      },\n      {\n        name: \"list-events\",\n        description: \"List events from a calendar\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            calendarId: {\n              type: \"string\",\n              description: \"ID of the calendar to list events from (use 'primary' for the main calendar)\",\n            },\n            timeMin: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"Start time in ISO format with timezone required (e.g., 2024-01-01T00:00:00Z or 2024-01-01T00:00:00+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n            timeMax: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"End time in ISO format with timezone required (e.g., 2024-12-31T23:59:59Z or 2024-12-31T23:59:59+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n          },\n          required: [\"calendarId\"],\n        },\n      },\n      {\n        name: \"search-events\",\n        description: \"Search for events in a calendar by text query\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            calendarId: {\n              type: \"string\",\n              description: \"ID of the calendar to search events in (use 'primary' for the main calendar)\",\n            },\n            query: {\n              type: \"string\",\n              description: \"Free text search query (searches summary, description, location, attendees, etc.)\",\n            },\n            timeMin: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"Start time boundary in ISO format with timezone required (e.g., 2024-01-01T00:00:00Z or 2024-01-01T00:00:00+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n            timeMax: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"End time boundary in ISO format with timezone required (e.g., 2024-12-31T23:59:59Z or 2024-12-31T23:59:59+00:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n          },\n          required: [\"calendarId\", \"query\"],\n        },\n      },\n      {\n        name: \"list-colors\",\n        description: \"List available color IDs and their meanings for calendar events\",\n        inputSchema: {\n          type: \"object\",\n          properties: {}, // No arguments needed\n          required: [],\n        },\n      },\n      {\n        name: \"create-event\",\n        description: \"Create a new calendar event\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            calendarId: {\n              type: \"string\",\n              description: \"ID of the calendar to create the event in (use 'primary' for the main calendar)\",\n            },\n            summary: {\n              type: \"string\",\n              description: \"Title of the event\",\n            },\n            description: {\n              type: \"string\",\n              description: \"Description/notes for the event (optional)\",\n            },\n            start: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"Start time in ISO format with timezone required (e.g., 2024-08-15T10:00:00Z or 2024-08-15T10:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n            end: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"End time in ISO format with timezone required (e.g., 2024-08-15T11:00:00Z or 2024-08-15T11:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n            timeZone: {\n              type: \"string\",\n              description:\n                \"Timezone of the event start/end times, formatted as an IANA Time Zone Database name (e.g., America/Los_Angeles). Required if start/end times are specified, especially for recurring events.\",\n            },\n            location: {\n              type: \"string\",\n              description: \"Location of the event (optional)\",\n            },\n            attendees: {\n              type: \"array\",\n              description: \"List of attendee email addresses (optional)\",\n              items: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    format: \"email\",\n                    description: \"Email address of the attendee\",\n                  },\n                },\n                required: [\"email\"],\n              },\n            },\n            colorId: {\n              type: \"string\",\n              description: \"Color ID for the event (optional, use list-colors to see available IDs)\",\n            },\n            reminders: remindersInputProperty,\n            recurrence: {\n              type: \"array\",\n              description:\n                \"List of recurrence rules (RRULE, EXRULE, RDATE, EXDATE) in RFC5545 format (optional). Example: [\\\"RRULE:FREQ=WEEKLY;COUNT=5\\\"]\",\n              items: {\n                type: \"string\"\n              }\n            },\n          },\n          required: [\"calendarId\", \"summary\", \"start\", \"end\", \"timeZone\"],\n        },\n      },\n      {\n        name: \"update-event\",\n        description: \"Update an existing calendar event\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            calendarId: {\n              type: \"string\",\n              description: \"ID of the calendar containing the event\",\n            },\n            eventId: {\n              type: \"string\",\n              description: \"ID of the event to update\",\n            },\n            summary: {\n              type: \"string\",\n              description: \"New title for the event (optional)\",\n            },\n            description: {\n              type: \"string\",\n              description: \"New description for the event (optional)\",\n            },\n            start: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"New start time in ISO format with timezone required (e.g., 2024-08-15T10:00:00Z or 2024-08-15T10:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n            end: {\n              type: \"string\",\n              format: \"date-time\",\n              description: \"New end time in ISO format with timezone required (e.g., 2024-08-15T11:00:00Z or 2024-08-15T11:00:00-07:00). Date-time must end with Z (UTC) or +/-HH:MM offset.\",\n            },\n            timeZone: {\n              type: \"string\",\n              description:\n                \"Timezone for the start/end times (IANA format, e.g., America/Los_Angeles). Required if modifying start/end, or for recurring events.\",\n            },\n            location: {\n              type: \"string\",\n              description: \"New location for the event (optional)\",\n            },\n            colorId: {\n              type: \"string\",\n              description: \"New color ID for the event (optional)\",\n            },\n            attendees: {\n              type: \"array\",\n              description: \"New list of attendee email addresses (optional, replaces existing attendees)\",\n              items: {\n                type: \"object\",\n                properties: {\n                  email: {\n                    type: \"string\",\n                    format: \"email\",\n                    description: \"Email address of the attendee\",\n                  },\n                },\n                required: [\"email\"],\n              },\n            },\n            reminders: {\n                ...remindersInputProperty,\n                description: \"New reminder settings for the event (optional)\",\n            },\n            recurrence: {\n              type: \"array\",\n              description:\n                \"New list of recurrence rules (RFC5545 format, optional, replaces existing rules). Example: [\\\"RRULE:FREQ=DAILY;COUNT=10\\\"]\",\n              items: {\n                type: \"string\"\n              }\n            },\n          },\n          required: [\"calendarId\", \"eventId\", \"timeZone\"], // timeZone is technically required for PATCH\n        },\n      },\n      {\n        name: \"delete-event\",\n        description: \"Delete a calendar event\",\n        inputSchema: {\n          type: \"object\",\n          properties: {\n            calendarId: {\n              type: \"string\",\n              description: \"ID of the calendar containing the event\",\n            },\n            eventId: {\n              type: \"string\",\n              description: \"ID of the event to delete\",\n            },\n          },\n          required: [\"calendarId\", \"eventId\"],\n        },\n      },\n    ],\n  };\n} ", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { GaxiosError } from 'gaxios';\nimport { calendar_v3, google } from \"googleapis\";\n\n\nexport abstract class BaseToolHandler {\n    abstract runTool(args: any, oauth2Client: OAuth2Client): Promise<CallToolResult>;\n\n    protected handleGoogleApiError(error: unknown): void {\n        if (\n            error instanceof GaxiosError &&\n            error.response?.data?.error === 'invalid_grant'\n        ) {\n            throw new Error(\n                'Google API Error: Authentication token is invalid or expired. Please re-run the authentication process (e.g., `npm run auth`).'\n            );\n        }\n        throw error;\n    }\n\n    protected getCalendar(auth: OAuth2Client): calendar_v3.Calendar {\n        return google.calendar({ version: 'v3', auth });\n    }\n}\n", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { BaseToolHandler } from \"./BaseToolHandler.js\";\nimport { calendar_v3, google } from \"googleapis\";\n\nexport class ListCalendarsHandler extends BaseToolHandler {\n    async runTool(_: any, oauth2Client: OAuth2Client): Promise<CallToolResult> {\n        const calendars = await this.listCalendars(oauth2Client);\n        return {\n            content: [{\n                type: \"text\", // This MUST be a string literal\n                text: this.formatCalendarList(calendars),\n            }],\n        };\n    }\n\n    private async listCalendars(client: OAuth2Client): Promise<calendar_v3.Schema$CalendarListEntry[]> {\n        try {\n            const calendar = this.getCalendar(client);\n            const response = await calendar.calendarList.list();\n            return response.data.items || [];\n        } catch (error) {\n            throw this.handleGoogleApiError(error);\n        }\n    }\n\n\n    /**\n     * Formats a list of calendars into a user-friendly string.\n     */\n    private formatCalendarList(calendars: calendar_v3.Schema$CalendarListEntry[]): string {\n        return calendars\n            .map((cal) => `${cal.summary || \"Untitled\"} (${cal.id || \"no-id\"})`)\n            .join(\"\\n\");\n    }\n\n}\n", "import { z } from 'zod';\n\n// Zod schemas for input validation\n\nexport const ReminderSchema = z.object({\n  method: z.enum(['email', 'popup']).default('popup'),\n  minutes: z.number(),\n});\n\nexport const RemindersSchema = z.object({\n  useDefault: z.boolean(),\n  overrides: z.array(ReminderSchema).optional(),\n});\n\n// ISO datetime regex that requires timezone designator (Z or +/-HH:MM)\nconst isoDateTimeWithTimezone = /^\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}(Z|[+-]\\d{2}:\\d{2})$/;\n\nexport const ListEventsArgumentsSchema = z.object({\n  calendarId: z.string(),\n  timeMin: z.string()\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\n    .optional(),\n  timeMax: z.string()\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-12-31T23:59:59Z)\")\n    .optional(),\n});\n\nexport const SearchEventsArgumentsSchema = z.object({\n  calendarId: z.string(),\n  query: z.string(),\n  timeMin: z.string()\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\n    .optional(), \n  timeMax: z.string()\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-12-31T23:59:59Z)\")\n    .optional(),\n});\n\nexport const CreateEventArgumentsSchema = z.object({\n  calendarId: z.string(),\n  summary: z.string(),\n  description: z.string().optional(),\n  start: z.string().regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\"), \n  end: z.string().regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\"),\n  timeZone: z.string(),\n  attendees: z\n    .array(\n      z.object({\n        email: z.string(),\n      })\n    )\n    .optional(),\n  location: z.string().optional(),\n  colorId: z.string().optional(),\n  reminders: RemindersSchema.optional(),\n  recurrence: z.array(z.string()).optional(),\n});\n\nexport const UpdateEventArgumentsSchema = z.object({\n  calendarId: z.string(),\n  eventId: z.string(),\n  summary: z.string().optional(),\n  description: z.string().optional(),\n  start: z.string()\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\n    .optional(),\n  end: z.string()\n    .regex(isoDateTimeWithTimezone, \"Must be ISO format with timezone (e.g., 2024-01-01T00:00:00Z)\")\n    .optional(),\n  timeZone: z.string(), // Required even if start/end don't change, per API docs for patch\n  attendees: z\n    .array(\n      z.object({\n        email: z.string(),\n      })\n    )\n    .optional(),\n  location: z.string().optional(),\n  colorId: z.string().optional(),\n  reminders: RemindersSchema.optional(),\n  recurrence: z.array(z.string()).optional(),\n});\n\nexport const DeleteEventArgumentsSchema = z.object({\n  calendarId: z.string(),\n  eventId: z.string(),\n}); ", "import { calendar_v3 } from \"googleapis\";\n\n/**\n * Formats a list of events into a user-friendly string.\n */\nexport function formatEventList(events: calendar_v3.Schema$Event[]): string {\n    return events\n        .map((event) => {\n            const attendeeList = event.attendees\n                ? `\\nAttendees: ${event.attendees\n                    .map((a) => `${a.email || \"no-email\"} (${a.responseStatus || \"unknown\"})`)\n                    .join(\", \")}`\n                : \"\";\n            const locationInfo = event.location ? `\\nLocation: ${event.location}` : \"\";\n            const colorInfo = event.colorId ? `\\nColor ID: ${event.colorId}` : \"\";\n            const reminderInfo = event.reminders\n                ? `\\nReminders: ${event.reminders.useDefault ? 'Using default' :\n                    (event.reminders.overrides || []).map((r: any) => `${r.method} ${r.minutes} minutes before`).join(', ') || 'None'}`\n                : \"\";\n            return `${event.summary || \"Untitled\"} (${event.id || \"no-id\"})${locationInfo}\\nStart: ${event.start?.dateTime || event.start?.date || \"unspecified\"}\\nEnd: ${event.end?.dateTime || event.end?.date || \"unspecified\"}${attendeeList}${colorInfo}${reminderInfo}\\n`;\n        })\n        .join(\"\\n\");\n}\n", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { ListEventsArgumentsSchema } from \"../../schemas/validators.js\";\nimport { BaseToolHandler } from \"./BaseToolHandler.js\";\nimport { google, calendar_v3 } from 'googleapis';\nimport { z } from 'zod';\nimport { formatEventList } from \"../utils.js\";\n\nexport class ListEventsHandler extends BaseToolHandler {\n    async runTool(args: any, oauth2Client: OAuth2Client): Promise<CallToolResult> {\n        const validArgs = ListEventsArgumentsSchema.parse(args);\n        const events = await this.listEvents(oauth2Client, validArgs);\n        return {\n            content: [{\n                type: \"text\",\n                text: formatEventList(events),\n            }],\n        };\n    }\n\n    private async listEvents(\n        client: OAuth2Client,\n        args: z.infer<typeof ListEventsArgumentsSchema>\n    ): Promise<calendar_v3.Schema$Event[]> {\n        try {\n            const calendar = this.getCalendar(client);\n            const response = await calendar.events.list({\n                calendarId: args.calendarId,\n                timeMin: args.timeMin,\n                timeMax: args.timeMax,\n                singleEvents: true,\n                orderBy: 'startTime',\n            });\n            return response.data.items || [];\n        } catch (error) {\n            throw this.handleGoogleApiError(error);\n        }\n    }\n}\n", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { SearchEventsArgumentsSchema } from \"../../schemas/validators.js\";\nimport { BaseToolHandler } from \"./BaseToolHandler.js\";\nimport { calendar_v3 } from 'googleapis';\nimport { z } from 'zod';\nimport { formatEventList } from \"../utils.js\";\n\nexport class SearchEventsHandler extends BaseToolHandler {\n    async runTool(args: any, oauth2Client: OAuth2Client): Promise<CallToolResult> {\n        const validArgs = SearchEventsArgumentsSchema.parse(args);\n        const events = await this.searchEvents(oauth2Client, validArgs);\n        return {\n            content: [{\n                type: \"text\",\n                text: formatEventList(events),\n            }],\n        };\n    }\n\n    private async searchEvents(\n        client: OAuth2Client,\n        args: z.infer<typeof SearchEventsArgumentsSchema>\n    ): Promise<calendar_v3.Schema$Event[]> {\n        try {\n            const calendar = this.getCalendar(client);\n            const response = await calendar.events.list({\n                calendarId: args.calendarId,\n                q: args.query,\n                timeMin: args.timeMin,\n                timeMax: args.timeMax,\n                singleEvents: true,\n                orderBy: 'startTime',\n            });\n            return response.data.items || [];\n        } catch (error) {\n            throw this.handleGoogleApiError(error);\n        }\n    }\n}\n", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { BaseToolHandler } from \"./BaseToolHandler.js\";\nimport { calendar_v3 } from \"googleapis\";\n\nexport class ListColorsHandler extends BaseToolHandler {\n    async runTool(_: any, oauth2Client: OAuth2Client): Promise<CallToolResult> {\n        const colors = await this.listColors(oauth2Client);\n        return {\n            content: [{\n                type: \"text\",\n                text: `Available event colors:\\n${this.formatColorList(colors)}`,\n            }],\n        };\n    }\n\n    private async listColors(client: OAuth2Client): Promise<calendar_v3.Schema$Colors> {\n        try {\n            const calendar = this.getCalendar(client);\n            const response = await calendar.colors.get();\n            if (!response.data) throw new Error('Failed to retrieve colors');\n            return response.data;\n        } catch (error) {\n            throw this.handleGoogleApiError(error);\n        }\n    }\n\n    /**\n     * Formats the color information into a user-friendly string.\n     */\n    private formatColorList(colors: calendar_v3.Schema$Colors): string {\n        const eventColors = colors.event || {};\n        return Object.entries(eventColors)\n            .map(([id, colorInfo]) => `Color ID: ${id} - ${colorInfo.background} (background) / ${colorInfo.foreground} (foreground)`)\n            .join(\"\\n\");\n    }\n}\n", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { CreateEventArgumentsSchema } from \"../../schemas/validators.js\";\nimport { BaseToolHandler } from \"./BaseToolHandler.js\";\nimport { calendar_v3, google } from 'googleapis';\nimport { z } from 'zod';\n\nexport class CreateEventHandler extends BaseToolHandler {\n    async runTool(args: any, oauth2Client: OAuth2Client): Promise<CallToolResult> {\n        const validArgs = CreateEventArgumentsSchema.parse(args);\n        const event = await this.createEvent(oauth2Client, validArgs);\n        return {\n            content: [{\n                type: \"text\",\n                text: `Event created: ${event.summary} (${event.id})`,\n            }],\n        };\n    }\n\n    private async createEvent(\n        client: OAuth2Client,\n        args: z.infer<typeof CreateEventArgumentsSchema>\n    ): Promise<calendar_v3.Schema$Event> {\n        try {\n            const calendar = this.getCalendar(client);\n            const requestBody: calendar_v3.Schema$Event = {\n                summary: args.summary,\n                description: args.description,\n                start: { dateTime: args.start, timeZone: args.timeZone },\n                end: { dateTime: args.end, timeZone: args.timeZone },\n                attendees: args.attendees,\n                location: args.location,\n                colorId: args.colorId,\n                reminders: args.reminders,\n                recurrence: args.recurrence,\n            };\n            const response = await calendar.events.insert({\n                calendarId: args.calendarId,\n                requestBody: requestBody,\n            });\n            if (!response.data) throw new Error('Failed to create event, no data returned');\n            return response.data;\n        } catch (error) {\n            throw this.handleGoogleApiError(error);\n        }\n    }\n}\n", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { UpdateEventArgumentsSchema } from \"../../schemas/validators.js\";\nimport { BaseToolHandler } from \"./BaseToolHandler.js\";\nimport { calendar_v3 } from 'googleapis';\nimport { z } from 'zod';\n\nexport class UpdateEventHandler extends BaseToolHandler {\n    async runTool(args: any, oauth2Client: OAuth2Client): Promise<CallToolResult> {\n        const validArgs = UpdateEventArgumentsSchema.parse(args);\n        const event = await this.updateEvent(oauth2Client, validArgs);\n        return {\n            content: [{\n                type: \"text\",\n                text: `Event updated: ${event.summary} (${event.id})`,\n            }],\n        };\n    }\n\n    private async updateEvent(\n        client: OAuth2Client,\n        args: z.infer<typeof UpdateEventArgumentsSchema>\n    ): Promise<calendar_v3.Schema$Event> {\n        try {\n            const calendar = this.getCalendar(client);\n            const requestBody: calendar_v3.Schema$Event = {};\n            if (args.summary !== undefined) requestBody.summary = args.summary;\n            if (args.description !== undefined) requestBody.description = args.description;\n\n            let timeChanged = false;\n            if (args.start !== undefined) {\n                requestBody.start = { dateTime: args.start, timeZone: args.timeZone };\n                timeChanged = true;\n            }\n            if (args.end !== undefined) {\n                requestBody.end = { dateTime: args.end, timeZone: args.timeZone };\n                timeChanged = true;\n            }\n\n            // If start or end was changed, ensure both objects exist and have the timezone.\n            // Also apply timezone if it's the only time-related field provided (for recurring events)\n            if (timeChanged || (!args.start && !args.end && args.timeZone)) {\n                if (!requestBody.start) requestBody.start = {};\n                if (!requestBody.end) requestBody.end = {};\n                // Only add timezone if not already added via dateTime object creation above\n                if (!requestBody.start.timeZone) requestBody.start.timeZone = args.timeZone;\n                if (!requestBody.end.timeZone) requestBody.end.timeZone = args.timeZone;\n            }\n\n            if (args.attendees !== undefined) requestBody.attendees = args.attendees;\n            if (args.location !== undefined) requestBody.location = args.location;\n            if (args.colorId !== undefined) requestBody.colorId = args.colorId;\n            if (args.reminders !== undefined) requestBody.reminders = args.reminders;\n            if (args.recurrence !== undefined) requestBody.recurrence = args.recurrence;\n\n            const response = await calendar.events.patch({\n                calendarId: args.calendarId,\n                eventId: args.eventId,\n                requestBody: requestBody,\n            });\n            if (!response.data) throw new Error('Failed to update event, no data returned');\n            return response.data;\n        } catch (error) {\n            throw this.handleGoogleApiError(error);\n        }\n    }\n}\n", "import { CallToolResult } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from \"google-auth-library\";\nimport { DeleteEventArgumentsSchema } from \"../../schemas/validators.js\";\nimport { BaseToolHandler } from \"./BaseToolHandler.js\";\nimport { z } from 'zod';\n\nexport class DeleteEventHandler extends BaseToolHandler {\n    async runTool(args: any, oauth2Client: OAuth2Client): Promise<CallToolResult> {\n        const validArgs = DeleteEventArgumentsSchema.parse(args);\n        await this.deleteEvent(oauth2Client, validArgs);\n        return {\n            content: [{\n                type: \"text\",\n                text: \"Event deleted successfully\",\n            }],\n        };\n    }\n\n    private async deleteEvent(\n        client: OAuth2Client,\n        args: z.infer<typeof DeleteEventArgumentsSchema>\n    ): Promise<void> {\n        try {\n            const calendar = this.getCalendar(client);\n            await calendar.events.delete({\n                calendarId: args.calendarId,\n                eventId: args.eventId,\n            });\n        } catch (error) {\n            throw this.handleGoogleApiError(error);\n        }\n    }\n}\n", "import { CallToolRequestSchema } from \"@modelcontextprotocol/sdk/types.js\";\nimport { OAuth2Client } from 'google-auth-library';\nimport { BaseToolHandler } from \"./core/BaseToolHandler.js\";\nimport { ListCalendarsHandler } from \"./core/ListCalendarsHandler.js\";\nimport { ListEventsHandler } from \"./core/ListEventsHandler.js\";\nimport { SearchEventsHandler } from \"./core/SearchEventsHandler.js\";\nimport { ListColorsHandler } from \"./core/ListColorsHandler.js\";\nimport { CreateEventHandler } from \"./core/CreateEventHandler.js\";\nimport { UpdateEventHandler } from \"./core/UpdateEventHandler.js\";\nimport { DeleteEventHandler } from \"./core/DeleteEventHandler.js\";\n\n/**\n * Handles incoming tool calls, validates arguments, calls the appropriate service,\n * and formats the response.\n *\n * @param request The CallToolRequest containing tool name and arguments.\n * @param oauth2Client The authenticated OAuth2 client instance.\n * @returns A Promise resolving to the CallToolResponse.\n */\nexport async function handleCallTool(request: typeof CallToolRequestSchema._type, oauth2Client: OAuth2Client) {\n    const { name, arguments: args } = request.params;\n\n    try {\n        const handler = getHandler(name);\n        return await handler.runTool(args, oauth2Client);\n    } catch (error: unknown) {\n        console.error(`Error executing tool '${name}':`, error);\n        // Re-throw the error to be handled by the main server logic or error handler\n        throw error;\n    }\n}\n\nconst handlerMap: Record<string, BaseToolHandler> = {\n    \"list-calendars\": new ListCalendarsHandler(),\n    \"list-events\": new ListEventsHandler(),\n    \"search-events\": new SearchEventsHandler(),\n    \"list-colors\": new ListColorsHandler(),\n    \"create-event\": new CreateEventHandler(),\n    \"update-event\": new UpdateEventHandler(),\n    \"delete-event\": new DeleteEventHandler(),\n};\n\nfunction getHandler(toolName: string): BaseToolHandler {\n    const handler = handlerMap[toolName];\n    if (!handler) {\n        throw new Error(`Unknown tool: ${toolName}`);\n    }\n    return handler;\n}\n"],
  "mappings": "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",
  "names": ["fileURLToPath", "OAuth2Client", "fs", "path", "oauth2Client", "oauth2Client", "OAuth2Client", "resolve", "GaxiosError", "oauth2Client", "oauth2Client", "oauth2Client", "oauth2Client", "oauth2Client", "oauth2Client", "oauth2Client", "oauth2Client", "fileURLToPath"]
}
